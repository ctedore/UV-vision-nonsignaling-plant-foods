% This script reads in the within-channel contrast table generated by the 'build_tables.m' script. It organizes the table, reclassifies specific botanical terms
% into broader categorizations, and limits comparisons to objects under similar illumination. It then plots the data and outputs the statistical analyses in the 
% command window. The only parameter that needs to be adjusted by the user is the 'animal' parameter.

%% USER ADJUSTABLE PARAMETER
animal = 'bird'; % 'bird' or 'generalTetra'
%%
clearvars -except animal
critN = 5;

if strcmp(animal, 'bird')
    numChans = 6;
    withinChTableName = 'bird_withinChannelTbl.mat';
    Clrs = [0.64 0 0.8; 0.8 0 1; 0 0.48 .8; 0 0.6 1; 0 0.8 0; 1 0 0];
elseif strcmp(animal, 'generalTetra')
    numChans = 4;
    withinChTableName = 'generalTetra_withinChannelTbl.mat';
    Clrs = [0.64 0 0.8; 0 0.48 0.8; 0 0.9 0; 1 0 0];
end
fileName = strcat(animal, 'WithinChannel');

%% loads within-channel table
load(withinChTableName);
Tbl = withinChTable;
clear withinChTable

%% limits object comparisons to objects under similar illumination
Tbl = sameIllum(Tbl);

%% reclassifies 'grass upper' as 'upper leaf surfaces' and 'grass lower' as 'lower leaf surfaces'
Tbl = reclassGrass(Tbl);

%% reclassify fiddleheads as leaf buds
Tbl = reclassFiddleheads(Tbl);

%% reclassify 'unripe fleshy fruit capsule' as 'unripe fleshy fruit' 
Tbl = reclassUnripeFFCapsules(Tbl);

%% reclassify various botanical names for immature non-fleshy fruits as 'immature seed'
Tbl = reclassImmatSeeds(Tbl);

%% object categories to compare
xObjCats = {'upper leaf surfaces';
               'lower leaf surfaces';
               'woody branch or trunk'};
yObjCats = {'leaf buds';
            'new leaves - upper';
            'new leaves - lower';
            'immature seed';
            'unripe fleshy fruit'};

%% organize plot data and run stats                                                                         
plotChans = numChans;
for i = 1:plotChans
    eval(['plotData', num2str(i), ' = [];']);
end

groupVar = 1;
fullTable = table();
N = [];
p = [];
eff = [];

for c = 1:size(yObjCats,1)
    for i = 1:size(xObjCats,1) 
        rows = (Tbl.obj1_class == xObjCats{i} & Tbl.obj2_class == yObjCats{c}) | ...
               (Tbl.obj2_class == xObjCats{i} & Tbl.obj1_class == yObjCats{c}); 
        selectTbl = Tbl(rows,:);
        sz = size(selectTbl,1);
        if sz > critN
            randEffTbl = buildRandEffTbl(selectTbl,c,yObjCats);
            N = [N; sz];

            % inverts sign of contrasts if focal obj is obj2
            for j = 1:sz
                if selectTbl.obj1_class(j) == xObjCats{i} 
                    selectTbl{j,16:16+numChans-1} = -1 * selectTbl{j,16:16+numChans-1};
                end
            end
            for n = 1:numChans
                eval(['plotData', num2str(n), ' = [plotData', num2str(n), '; selectTbl.E', num2str(n), '_contrast, groupVar * ones(sz,1)];']);
            end

            % build stat table & run stats
            for d = 1:numChans-1
                contrast = vertcat(selectTbl{:,16}, selectTbl{:,16+d});
                contrast = table(contrast);
                altlogic = logical(vertcat(zeros(sz,1), ones(sz,1)));
                altlogic = table(altlogic);
                statTbl = vertcat(selectTbl,selectTbl);
                randEff = vertcat(randEffTbl,randEffTbl);
                statTable = horzcat(statTbl, altlogic, contrast, randEff);
                string = 'contrast ~ altlogic + (1|focalObjID:backObjID) + (1|focalObjID) + (1|backObjID) + (1|focalObjSpp)';
                lme = fitlme(statTable, string);
                disp(string)
                disp(lme)
                p(d,groupVar) = lme.Coefficients(2,6);
                eff(d,groupVar) = lme.Coefficients(2,2);
                fullTable = vertcat(fullTable, statTable);
            end
            groupVar = groupVar + 1; 
        end
    end
end
N

%% plot data
numBars = groupVar - 1;
spacing = 0.1;
f = figure;
for n = 1:numChans
    eval(['formatPlot(plotData', num2str(n), ',', num2str(n)' ', Clrs, 1+', num2str(n-1), '*spacing:1:numBars+', num2str(n-1), '*spacing,eff);']);
    hold on
    pause(1)
end

% plot significance stars    
if strcmp(animal, 'bird')
    offset = -0.0555;
elseif strcmp(animal, 'generalTetra')
    offset = -0.05;
end
posStar = 0.6;
negStar = -.68;    
for cone = 1:size(eff,1)
    for i = 1:size(eff,2)
        if p(cone, i) < 0.05
            if eff(cone, i) > 0
                text(i+(spacing*cone)+offset, posStar, '*', 'FontSize', 24, 'Color', Clrs(cone+1,:))
            else
                text(i+(spacing*cone)+offset, negStar, '*', 'FontSize', 24, 'Color', Clrs(cone+1,:))
            end
        end
    end
end

x = [0, groupVar];
y = [0 0];
plot(x,y,'k')
xlim([0.74 numBars+0.8])
set(gca, 'TickLength', [0.0025 0.0025]);
xcoord = 40 + (numBars * 100);
set(gcf, 'Position', [1 1 xcoord 420]) 
box on
set(gca,'TickDir','out');
xticklabels([])
xticks([])
ylim([-.7 .67])
set(gca, 'FontSize', 18)
print(fileName, '-r600', '-dpng') 
savefig([fileName, '.fig'])

%% FUNCTIONS
% limits object comparisons to objects under similar illumination
function Tbl = sameIllum(Tbl)
    rows = (Tbl.directLightObj1 == '0' & Tbl.directLightObj2 == '0') | (Tbl.directLightObj1 == '1' & Tbl.directLightObj2 == '1') | (isundefined(Tbl.directLightObj1) & isundefined(Tbl.directLightObj2));
    Tbl = Tbl(rows,:);
end

% reclassifies 'grass upper' as 'upper leaf surfaces' and 'grass lower' as 'lower leaf surfaces'
function Tbl = reclassGrass(Tbl)
    rows = Tbl.obj1_class == 'grass upper';
    Tbl.obj1_class(rows) = 'upper leaf surfaces';
    rows = Tbl.obj2_class == 'grass upper';
    Tbl.obj2_class(rows) = 'upper leaf surfaces';
    
    rows = Tbl.obj1_class == 'grass lower';
    Tbl.obj1_class(rows) = 'lower leaf surfaces';
    rows = Tbl.obj2_class == 'grass lower';
    Tbl.obj2_class(rows) = 'lower leaf surfaces';
end

% reclassify fiddleheads as leaf buds
function Tbl = reclassFiddleheads(Tbl)
    rows = Tbl.obj1_class == 'fiddlehead';
    Tbl.obj1_class(rows) = 'leaf buds';

    rows = Tbl.obj2_class == 'fiddlehead';
    Tbl.obj2_class(rows) = 'leaf buds';
end

% reclassify unripe fleshy fruit capsules as unripe fleshy fruits
function Tbl = reclassUnripeFFCapsules(Tbl)
    rows = Tbl.obj1_class == 'unripe fleshy fruit capsule';
    Tbl.obj1_class(rows) = 'unripe fleshy fruit';

    rows = Tbl.obj2_class == 'unripe fleshy fruit capsule';
    Tbl.obj2_class(rows) = 'unripe fleshy fruit';
end

% reclassify various botanical names for immature non-fleshy fruits as 'immature seed'
function Tbl = reclassImmatSeeds(Tbl)
    rows = Tbl.obj1_class == 'immature achene' | Tbl.obj1_class == 'immature nut' | Tbl.obj1_class == 'immature seedpod' | Tbl.obj1_class == 'immature spikelet';
    Tbl.obj1_class(rows) = 'immature seed';

    rows = Tbl.obj2_class == 'immature achene' | Tbl.obj2_class == 'immature nut' | Tbl.obj2_class == 'immature seedpod' | Tbl.obj2_class == 'immature spikelet';
    Tbl.obj2_class(rows) = 'immature seed';
end

% build random effects table
function randEffTbl = buildRandEffTbl(selectTbl,c,yObjCats)
    focalObj = cell(height(selectTbl),1);
    focalObjID = categorical(height(selectTbl),1);
    backObjID = categorical(height(selectTbl),1);
    focalObjSpp = categorical(height(selectTbl),1);
    backObjSpp = categorical(height(selectTbl),1);
    for j = 1:height(selectTbl)
        focalObj{j} = yObjCats{c};
        if selectTbl.obj1_class(j) == yObjCats{c}
            focalObjID(j,1) = selectTbl.obj1(j);
            backObjID(j,1) = selectTbl.obj2(j);
            focalObjSpp(j,1) = selectTbl.species1(j);
            backObjSpp(j,1) = selectTbl.species2(j);
        else
            focalObjID(j,1) = selectTbl.obj2(j);
            backObjID(j,1) = selectTbl.obj1(j);
            focalObjSpp(j,1) = selectTbl.species2(j);
            backObjSpp(j,1) = selectTbl.species1(j);
        end
    end
    randEffTbl = table(focalObjID, backObjID, focalObjSpp, backObjSpp, focalObj);
end

% format plot
function [] = formatPlot(inputData,cone,Clrs,xPos,coeffs)
    hold on
    boxplot(inputData(:,1), inputData(:,2), 'positions', xPos, 'PlotStyle', 'compact', 'Symbol', '', 'Colors', Clrs(cone,:))
end