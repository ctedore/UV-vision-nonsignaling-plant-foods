% This script reads in the RNL color contrast table and, if animal='bird', it also read in the double cone versus color contrast table, generated by the 'build_tables.m' script. 
% It organizes the tables, reclassifies specific botanical terms into broader categorizations, and limits comparisons to objects under similar illumination. 
% It then plots the data and outputs the statistical analyses in the command window. The only parameter that needs to be adjusted by the user is the 'animal' parameter.

%% USER ADJUSTABLE PARAMETER
animal = 'bird'; % 'bird' or 'generalTetra'
%%
clearvars -except animal
critN = 5;

if strcmp(animal, 'bird')
    RNLtableName = 'bird_RNLTbl.mat';
    DCtableName = 'dblCone_v_Color_table.mat';
    dc = 1;
    numVisSystems = 4;
    plotDataCats = 5;
    Clrs = [0.75 0.75 0.75; 0.64 0 0.8; 0.8 0 1; 0 0.6 1; 0 0 0];
elseif strcmp(animal, 'generalTetra')
    RNLtableName = 'generalTetra_RNLTbl.mat';
    dc = 0;
    numVisSystems = 2;
    plotDataCats = 2;
    Clrs = [0.64 0 0.8; 0 0 0];
end
fileName = strcat(animal, 'RNL');

%%
load(RNLtableName);
Tbl = RNLtable;
clear RNLtable

if dc == 1
    load(DCtableName);
    DCtbl = DC_v_color_table;
    clear DC_v_color_table
end

%% limits object comparisons to objects under similar illumination
Tbl = sameIllum(Tbl);
if dc == 1
    DCtbl = sameIllum(DCtbl);
end

%% reclassifies 'grass upper' as 'upper leaf surfaces' and 'grass lower' as 'lower leaf surfaces'
Tbl = reclassGrass(Tbl);
if dc == 1
    DCtbl = reclassGrass(DCtbl);
end

%% reclassify fiddleheads as leaf buds
Tbl = reclassFiddleheads(Tbl);
if dc == 1
    DCtbl = reclassFiddleheads(DCtbl);
end

%% reclassify 'unripe fleshy fruit capsule' as 'unripe fleshy fruit' 
Tbl = reclassUnripeFFCapsules(Tbl);
if dc == 1
    DCtbl = reclassUnripeFFCapsules(DCtbl);
end

%% reclassify various botanical names for immature non-fleshy fruits as 'immature seed'
Tbl = reclassImmatSeeds(Tbl);
if dc == 1
    DCtbl = reclassImmatSeeds(DCtbl);
end

%% object categories to compare
xObjCats = {'upper leaf surfaces';
               'lower leaf surfaces';
               'woody branch or trunk'};
yObjCats = {'leaf buds';
            'new leaves - upper';
            'new leaves - lower';
            'immature seed';
            'unripe fleshy fruit'};
numObjCats = 13;

%%                                                                            
for i = 1:plotDataCats
    eval(['plotData', num2str(i), ' = [];']);
end

groupVar = 1;
fullTable = table();
fullTableDC = table();
N = [];
p_RNL = [];
eff_RNL = [];
pDC = [];
effDC = [];

for c = 1:size(yObjCats,1)
    for i = 1:size(xObjCats,1) 
        rows = (Tbl.obj1_class == xObjCats{i} & Tbl.obj2_class == yObjCats{c}) | ...
               (Tbl.obj2_class == xObjCats{i} & Tbl.obj1_class == yObjCats{c}); 
        selectTbl = Tbl(rows,:);
        if dc == 1
            rows = (DCtbl.obj1_class == xObjCats{i} & DCtbl.obj2_class == yObjCats{c}) | ...
                   (DCtbl.obj2_class == xObjCats{i} & DCtbl.obj1_class == yObjCats{c}); 
            selectTblDC = DCtbl(rows,:);
        end
        
        sz = size(selectTbl,1) / numVisSystems;
        if sz > critN
                randEffTbl = buildRandEffTbl(selectTbl,c,yObjCats);
                if dc == 1
                    randEffTblDC = buildRandEffTbl(selectTblDC,c,yObjCats);
                end

            N = [N; height(selectTbl) / numVisSystems];
            if dc == 1
                plotData = dataOrg(selectTbl, dc, selectTblDC, numVisSystems);
            else
                plotData = dataOrg(selectTbl, dc, [], numVisSystems);
            end
            for n = 1:plotDataCats
                string = ['plotData', num2str(n), ' = [plotData', num2str(n), '; plotData(:,', num2str(n), '), groupVar * ones(sz,1)];'];
                eval(string);
            end

            % build stat table & run stats
            statTable = horzcat(selectTbl, randEffTbl);
            if numVisSystems == 4
                statTable.a_Vpresent = statTable.Vpresent;
                statTable.b_Svpresent = statTable.Svpresent;
                statTable.c_UVabsent = statTable.UVabsent;
                string = 'RNL_contrast ~ a_Vpresent + b_Svpresent + c_UVabsent + (1|focalObjID:backObjID) + (1|focalObjID) + (1|backObjID) + (1|focalObjSpp)';
                lme = fitlme(statTable, string);
                disp(string)
                disp(lme)
            elseif numVisSystems == 2 
                string = 'RNL_contrast ~ UVabsent +  (1|focalObjID:backObjID) + (1|focalObjID) + (1|backObjID) + (1|focalObjSpp)';
                lme = fitlme(statTable, string);
                disp(string)
                disp(lme)
            end
            if dc == 1 
                statTableDC = horzcat(selectTblDC, randEffTblDC);
                string = 'contrast ~ chrContrast + (1|focalObjID:backObjID) + (1|focalObjID) + (1|backObjID) + (1|focalObjSpp)';
                lmeDC = fitlme(statTableDC, string);
                disp(string)
                disp(lmeDC)
            end
            [warnmsg, ~] = lastwarn;            
            for e = 2:numVisSystems
                if sz > critN && ~strcmp(warnmsg, 'Warning: Initial estimate of residual noise standard deviation is almost zero. This may indicate a nearly perfect fit to data.')
                    p_RNL(e-1, groupVar) = double(lme.Coefficients(e,6));
                    eff_RNL(e-1, groupVar) = double(lme.Coefficients(e,2));
                else
                    p_RNL(e-1, groupVar) = NaN;
                    eff_RNL(e-1, groupVar) = NaN;
                end
            end

            if dc == 1
                pDC(1, groupVar) = double(lmeDC.Coefficients(2,6));
                effDC(1, groupVar) = double(lmeDC.Coefficients(2,2));
                fullTableDC = vertcat(fullTableDC, statTableDC);
            end
            fullTable = vertcat(fullTable, statTable);
            groupVar = groupVar + 1; 
            warnsmg = 'none';
        end
    end
end
N  

numBars = groupVar - 1;
spacing = 0.12;
f = figure;

if dc == 0
    shift = 0; % shifts first plotted box to the right by unit 'spacing' (defined above)
else
    shift = 1; % does not shift first plotted box
end
for n = 1:plotDataCats
    eval(['formatPlot(plotData', num2str(n), ',', num2str(n)' ', Clrs, 1+', num2str(n-shift), '*spacing:1:numBars+', num2str(n-shift), '*spacing);']);
    hold on
    pause(1)
end

% plot line at y=0
x = [0, groupVar];
y = [0 0];
plot(x,y,'k')
box on
ylim([-0.5 5.4]) 
set(gca,'TickDir','out');
xticklabels([])
xticks([])
xlim([0.74 numBars+0.8])
xcoord = 40 + (numBars * 100);
set(gcf, 'Position', [1 1 xcoord 420]) 
set(gca, 'FontSize', 18)

% P Stars
posStar = 6.2;
negStar = -0.3;
pSpacing = 0.13;
if strcmp(animal, 'bird')
    offset = 0.045;
else
    offset = 0.056;
end
for cone = 1:numVisSystems-1
    for i = 1:size(eff_RNL,2)
        if p_RNL(cone,i) < 0.05
            if eff_RNL(cone,i) > 0
                text(i+(pSpacing*cone)+offset, posStar, '*', 'FontSize', 24, 'Color', Clrs(cone+1+dc,:))
            else
                text(i+(pSpacing*cone)+offset, negStar, '*', 'FontSize', 24, 'Color', Clrs(cone+1+dc,:))
            end
        end
    end
end

if dc ==1
    for i = 1:size(effDC,2)
        if pDC(i) < 0.05
            if effDC(i) < 0
                text(i-0.2+pSpacing, posStar, '*', 'FontSize', 24, 'Color', Clrs(1,:))
            else
                text(i-0.2+pSpacing, negStar, '*', 'FontSize', 24, 'Color', Clrs(1,:))
            end
        end
    end
end

figname = [fileName, '.png'];
print(figname, '-r600', '-dpng') 
savefig([fileName, '.fig'])

%% FUNCTIONS
% limits object comparisons to objects under similar illumination
function Tbl = sameIllum(Tbl)
    rows = (Tbl.directLightObj1 == '0' & Tbl.directLightObj2 == '0') | (Tbl.directLightObj1 == '1' & Tbl.directLightObj2 == '1') | (isundefined(Tbl.directLightObj1) & isundefined(Tbl.directLightObj2));
    Tbl = Tbl(rows,:);
end

% reclassifies 'grass upper' as 'upper leaf surfaces' and 'grass lower' as 'lower leaf surfaces'
function Tbl = reclassGrass(Tbl)
    rows = Tbl.obj1_class == 'grass upper';
    Tbl.obj1_class(rows) = 'upper leaf surfaces';
    rows = Tbl.obj2_class == 'grass upper';
    Tbl.obj2_class(rows) = 'upper leaf surfaces';
    
    rows = Tbl.obj1_class == 'grass lower';
    Tbl.obj1_class(rows) = 'lower leaf surfaces';
    rows = Tbl.obj2_class == 'grass lower';
    Tbl.obj2_class(rows) = 'lower leaf surfaces';
end

% reclassify fiddleheads as leaf buds
function Tbl = reclassFiddleheads(Tbl)
    rows = Tbl.obj1_class == 'fiddlehead';
    Tbl.obj1_class(rows) = 'leaf buds';

    rows = Tbl.obj2_class == 'fiddlehead';
    Tbl.obj2_class(rows) = 'leaf buds';
end

% reclassify unripe fleshy fruit capsules as unripe fleshy fruits
function Tbl = reclassUnripeFFCapsules(Tbl)
    rows = Tbl.obj1_class == 'unripe fleshy fruit capsule';
    Tbl.obj1_class(rows) = 'unripe fleshy fruit';

    rows = Tbl.obj2_class == 'unripe fleshy fruit capsule';
    Tbl.obj2_class(rows) = 'unripe fleshy fruit';
end

% reclassify various botanical names for immature non-fleshy fruits as 'immature seed'
function Tbl = reclassImmatSeeds(Tbl)
    rows = Tbl.obj1_class == 'immature achene' | Tbl.obj1_class == 'immature nut' | Tbl.obj1_class == 'immature seedpod' | Tbl.obj1_class == 'immature spikelet';
    Tbl.obj1_class(rows) = 'immature seed';

    rows = Tbl.obj2_class == 'immature achene' | Tbl.obj2_class == 'immature nut' | Tbl.obj2_class == 'immature seedpod' | Tbl.obj2_class == 'immature spikelet';
    Tbl.obj2_class(rows) = 'immature seed';
end

% build random effects table
function randEffTbl = buildRandEffTbl(selectTbl,c,yObjCats)
    focalObj = cell(height(selectTbl),1);
    focalObjID = categorical(height(selectTbl),1);
    backObjID = categorical(height(selectTbl),1);
    focalObjSpp = categorical(height(selectTbl),1);
    backObjSpp = categorical(height(selectTbl),1);
    for j = 1:height(selectTbl)
        focalObj{j} = yObjCats{c};
        if selectTbl.obj1_class(j) == yObjCats{c}
            focalObjID(j,1) = selectTbl.obj1(j);
            backObjID(j,1) = selectTbl.obj2(j);
            focalObjSpp(j,1) = selectTbl.species1(j);
            backObjSpp(j,1) = selectTbl.species2(j);
        else
            focalObjID(j,1) = selectTbl.obj2(j);
            backObjID(j,1) = selectTbl.obj1(j);
            focalObjSpp(j,1) = selectTbl.species2(j);
            backObjSpp(j,1) = selectTbl.species1(j);
        end
    end
    randEffTbl = table(focalObjID, backObjID, focalObjSpp, backObjSpp, focalObj);
end

% organize plot data
function plotData = dataOrg(RNLtbl,dc,DCtbl,numVisSystems)
    if numVisSystems == 4
        plotData = horzcat(DCtbl.contrast(DCtbl.chrContrast == 0), ...
                       RNLtbl.RNL_contrast(RNLtbl.Vpresent == 0 & RNLtbl.UVabsent == 0), ...
                       RNLtbl.RNL_contrast(RNLtbl.Svpresent == 0 & RNLtbl.Vpresent == 1), ...
                       RNLtbl.RNL_contrast(RNLtbl.Svpresent == 1 & RNLtbl.Vpresent == 1), ...
                       RNLtbl.RNL_contrast(RNLtbl.UVabsent == 1));   
    elseif numVisSystems == 2 
        plotData = horzcat(RNLtbl.RNL_contrast(RNLtbl.UVabsent == 0), ...
                           RNLtbl.RNL_contrast(RNLtbl.UVabsent == 1)); 
    end
end

% format plot
function [] = formatPlot(inputData,cone,Clrs,xPos)
    hold on
    boxplot(inputData(:,1), inputData(:,2), 'positions', xPos, 'PlotStyle', 'compact', 'Symbol', '', 'Colors', Clrs(cone,:))
end
